'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _bluebird = require('bluebird');

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _mimeTypes = require('mime-types');

var _mimeTypes2 = _interopRequireDefault(_mimeTypes);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _oraHandler = require('../util/ora-handler');

var _oraHandler2 = _interopRequireDefault(_oraHandler);

var _github = require('../util/github');

var _github2 = _interopRequireDefault(_github);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (() => {
  var _ref = (0, _bluebird.coroutine)(function* ({ artifacts, packageJSON, forgeConfig, authToken, tag }) {
    if (!(forgeConfig.github_repository && typeof forgeConfig.github_repository === 'object' && forgeConfig.github_repository.owner && forgeConfig.github_repository.name)) {
      throw 'In order to publish to github you must set the "github_repository.owner" and "github_repository.name" properties in your forge config. See the docs for more info'; // eslint-disable-line
    }

    const github = new _github2.default(authToken, true);

    let release;
    yield (0, _oraHandler2.default)('Searching for target release', (0, _bluebird.coroutine)(function* () {
      try {
        release = (yield github.getGitHub().repos.getReleases({
          owner: forgeConfig.github_repository.owner,
          repo: forgeConfig.github_repository.name,
          per_page: 100
        })).data.find(function (testRelease) {
          return testRelease.tag_name === (tag || `v${packageJSON.version}`);
        });
        if (!release) {
          throw { code: 404 };
        }
      } catch (err) {
        if (err.code === 404) {
          // Release does not exist, let's make it
          release = (yield github.getGitHub().repos.createRelease({
            owner: forgeConfig.github_repository.owner,
            repo: forgeConfig.github_repository.name,
            tag_name: tag || `v${packageJSON.version}`,
            name: tag || `v${packageJSON.version}`,
            draft: forgeConfig.github_repository.draft !== false,
            prerelease: forgeConfig.github_repository.prerelease === true
          })).data;
        } else {
          // Unknown error
          throw err;
        }
      }
    }));

    let uploaded = 0;
    yield (0, _oraHandler2.default)(`Uploading Artifacts ${uploaded}/${artifacts.length}`, (() => {
      var _ref3 = (0, _bluebird.coroutine)(function* (uploadSpinner) {
        const updateSpinner = function updateSpinner() {
          uploadSpinner.text = `Uploading Artifacts ${uploaded}/${artifacts.length}`; // eslint-disable-line
        };

        yield _promise2.default.all(artifacts.map(function (artifactPath) {
          return new _promise2.default((() => {
            var _ref4 = (0, _bluebird.coroutine)(function* (resolve) {
              const done = function done() {
                uploaded += 1;
                updateSpinner();
                resolve();
              };
              if (release.assets.find(function (asset) {
                return asset.name === _path2.default.basename(artifactPath);
              })) {
                return done();
              }
              yield github.getGitHub().repos.uploadAsset({
                url: release.upload_url,
                file: _fsExtra2.default.createReadStream(artifactPath),
                contentType: _mimeTypes2.default.lookup(artifactPath) || 'application/octet-stream',
                contentLength: (yield _fsExtra2.default.stat(artifactPath)).size,
                name: _path2.default.basename(artifactPath)
              });
              return done();
            });

            return function (_x3) {
              return _ref4.apply(this, arguments);
            };
          })());
        }));
      });

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    })());
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInB1Ymxpc2hlcnMvZ2l0aHViLmpzIl0sIm5hbWVzIjpbImFydGlmYWN0cyIsInBhY2thZ2VKU09OIiwiZm9yZ2VDb25maWciLCJhdXRoVG9rZW4iLCJ0YWciLCJnaXRodWJfcmVwb3NpdG9yeSIsIm93bmVyIiwibmFtZSIsImdpdGh1YiIsInJlbGVhc2UiLCJnZXRHaXRIdWIiLCJyZXBvcyIsImdldFJlbGVhc2VzIiwicmVwbyIsInBlcl9wYWdlIiwiZGF0YSIsImZpbmQiLCJ0ZXN0UmVsZWFzZSIsInRhZ19uYW1lIiwidmVyc2lvbiIsImNvZGUiLCJlcnIiLCJjcmVhdGVSZWxlYXNlIiwiZHJhZnQiLCJwcmVyZWxlYXNlIiwidXBsb2FkZWQiLCJsZW5ndGgiLCJ1cGxvYWRTcGlubmVyIiwidXBkYXRlU3Bpbm5lciIsInRleHQiLCJhbGwiLCJtYXAiLCJyZXNvbHZlIiwiZG9uZSIsImFzc2V0cyIsImFzc2V0IiwiYmFzZW5hbWUiLCJhcnRpZmFjdFBhdGgiLCJ1cGxvYWRBc3NldCIsInVybCIsInVwbG9hZF91cmwiLCJmaWxlIiwiY3JlYXRlUmVhZFN0cmVhbSIsImNvbnRlbnRUeXBlIiwibG9va3VwIiwiY29udGVudExlbmd0aCIsInN0YXQiLCJzaXplIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOzs7Ozs7O3NDQUVlLFdBQU8sRUFBRUEsU0FBRixFQUFhQyxXQUFiLEVBQTBCQyxXQUExQixFQUF1Q0MsU0FBdkMsRUFBa0RDLEdBQWxELEVBQVAsRUFBbUU7QUFDaEYsUUFBSSxFQUFFRixZQUFZRyxpQkFBWixJQUFpQyxPQUFPSCxZQUFZRyxpQkFBbkIsS0FBeUMsUUFBMUUsSUFDSkgsWUFBWUcsaUJBQVosQ0FBOEJDLEtBRDFCLElBQ21DSixZQUFZRyxpQkFBWixDQUE4QkUsSUFEbkUsQ0FBSixFQUM4RTtBQUM1RSxZQUFNLG1LQUFOLENBRDRFLENBQytGO0FBQzVLOztBQUVELFVBQU1D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QUFBQTtBQUFBO0FBQUEsZUFEOEI7QUFBQSxTQUFkLENBQVosQ0FBTjtBQW9CRCxPQXpCSzs7QUFBQTtBQUFBO0FBQUE7QUFBQSxTQUFOO0FBMEJELEciLCJmaWxlIjoicHVibGlzaGVycy9naXRodWIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IG1pbWUgZnJvbSAnbWltZS10eXBlcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuaW1wb3J0IGFzeW5jT3JhIGZyb20gJy4uL3V0aWwvb3JhLWhhbmRsZXInO1xuaW1wb3J0IEdpdEh1YiBmcm9tICcuLi91dGlsL2dpdGh1Yic7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jICh7IGFydGlmYWN0cywgcGFja2FnZUpTT04sIGZvcmdlQ29uZmlnLCBhdXRoVG9rZW4sIHRhZyB9KSA9PiB7XG4gIGlmICghKGZvcmdlQ29uZmlnLmdpdGh1Yl9yZXBvc2l0b3J5ICYmIHR5cGVvZiBmb3JnZUNvbmZpZy5naXRodWJfcmVwb3NpdG9yeSA9PT0gJ29iamVjdCcgJiZcbiAgICBmb3JnZUNvbmZpZy5naXRodWJfcmVwb3NpdG9yeS5vd25lciAmJiBmb3JnZUNvbmZpZy5naXRodWJfcmVwb3NpdG9yeS5uYW1lKSkge1xuICAgIHRocm93ICdJbiBvcmRlciB0byBwdWJsaXNoIHRvIGdpdGh1YiB5b3UgbXVzdCBzZXQgdGhlIFwiZ2l0aHViX3JlcG9zaXRvcnkub3duZXJcIiBhbmQgXCJnaXRodWJfcmVwb3NpdG9yeS5uYW1lXCIgcHJvcGVydGllcyBpbiB5b3VyIGZvcmdlIGNvbmZpZy4gU2VlIHRoZSBkb2NzIGZvciBtb3JlIGluZm8nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIH1cblxuICBjb25zdCBnaXRodWIgPSBuZXcgR2l0SHViKGF1dGhUb2tlbiwgdHJ1ZSk7XG5cbiAgbGV0IHJlbGVhc2U7XG4gIGF3YWl0IGFzeW5jT3JhKCdTZWFyY2hpbmcgZm9yIHRhcmdldCByZWxlYXNlJywgYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICByZWxlYXNlID0gKGF3YWl0IGdpdGh1Yi5nZXRHaXRIdWIoKS5yZXBvcy5nZXRSZWxlYXNlcyh7XG4gICAgICAgIG93bmVyOiBmb3JnZUNvbmZpZy5naXRodWJfcmVwb3NpdG9yeS5vd25lcixcbiAgICAgICAgcmVwbzogZm9yZ2VDb25maWcuZ2l0aHViX3JlcG9zaXRvcnkubmFtZSxcbiAgICAgICAgcGVyX3BhZ2U6IDEwMCxcbiAgICAgIH0pKS5kYXRhLmZpbmQodGVzdFJlbGVhc2UgPT4gdGVzdFJlbGVhc2UudGFnX25hbWUgPT09ICh0YWcgfHwgYHYke3BhY2thZ2VKU09OLnZlcnNpb259YCkpO1xuICAgICAgaWYgKCFyZWxlYXNlKSB7XG4gICAgICAgIHRocm93IHsgY29kZTogNDA0IH07XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoZXJyLmNvZGUgPT09IDQwNCkge1xuICAgICAgICAvLyBSZWxlYXNlIGRvZXMgbm90IGV4aXN0LCBsZXQncyBtYWtlIGl0XG4gICAgICAgIHJlbGVhc2UgPSAoYXdhaXQgZ2l0aHViLmdldEdpdEh1YigpLnJlcG9zLmNyZWF0ZVJlbGVhc2Uoe1xuICAgICAgICAgIG93bmVyOiBmb3JnZUNvbmZpZy5naXRodWJfcmVwb3NpdG9yeS5vd25lcixcbiAgICAgICAgICByZXBvOiBmb3JnZUNvbmZpZy5naXRodWJfcmVwb3NpdG9yeS5uYW1lLFxuICAgICAgICAgIHRhZ19uYW1lOiB0YWcgfHwgYHYke3BhY2thZ2VKU09OLnZlcnNpb259YCxcbiAgICAgICAgICBuYW1lOiB0YWcgfHwgYHYke3BhY2thZ2VKU09OLnZlcnNpb259YCxcbiAgICAgICAgICBkcmFmdDogZm9yZ2VDb25maWcuZ2l0aHViX3JlcG9zaXRvcnkuZHJhZnQgIT09IGZhbHNlLFxuICAgICAgICAgIHByZXJlbGVhc2U6IGZvcmdlQ29uZmlnLmdpdGh1Yl9yZXBvc2l0b3J5LnByZXJlbGVhc2UgPT09IHRydWUsXG4gICAgICAgIH0pKS5kYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVW5rbm93biBlcnJvclxuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBsZXQgdXBsb2FkZWQgPSAwO1xuICBhd2FpdCBhc3luY09yYShgVXBsb2FkaW5nIEFydGlmYWN0cyAke3VwbG9hZGVkfS8ke2FydGlmYWN0cy5sZW5ndGh9YCwgYXN5bmMgKHVwbG9hZFNwaW5uZXIpID0+IHtcbiAgICBjb25zdCB1cGRhdGVTcGlubmVyID0gKCkgPT4ge1xuICAgICAgdXBsb2FkU3Bpbm5lci50ZXh0ID0gYFVwbG9hZGluZyBBcnRpZmFjdHMgJHt1cGxvYWRlZH0vJHthcnRpZmFjdHMubGVuZ3RofWA7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICB9O1xuXG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoYXJ0aWZhY3RzLm1hcChhcnRpZmFjdFBhdGggPT5cbiAgICAgIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlKSA9PiB7XG4gICAgICAgIGNvbnN0IGRvbmUgPSAoKSA9PiB7XG4gICAgICAgICAgdXBsb2FkZWQgKz0gMTtcbiAgICAgICAgICB1cGRhdGVTcGlubmVyKCk7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAocmVsZWFzZS5hc3NldHMuZmluZChhc3NldCA9PiBhc3NldC5uYW1lID09PSBwYXRoLmJhc2VuYW1lKGFydGlmYWN0UGF0aCkpKSB7XG4gICAgICAgICAgcmV0dXJuIGRvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBnaXRodWIuZ2V0R2l0SHViKCkucmVwb3MudXBsb2FkQXNzZXQoe1xuICAgICAgICAgIHVybDogcmVsZWFzZS51cGxvYWRfdXJsLFxuICAgICAgICAgIGZpbGU6IGZzLmNyZWF0ZVJlYWRTdHJlYW0oYXJ0aWZhY3RQYXRoKSxcbiAgICAgICAgICBjb250ZW50VHlwZTogbWltZS5sb29rdXAoYXJ0aWZhY3RQYXRoKSB8fCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyxcbiAgICAgICAgICBjb250ZW50TGVuZ3RoOiAoYXdhaXQgZnMuc3RhdChhcnRpZmFjdFBhdGgpKS5zaXplLFxuICAgICAgICAgIG5hbWU6IHBhdGguYmFzZW5hbWUoYXJ0aWZhY3RQYXRoKSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBkb25lKCk7XG4gICAgICB9KVxuICAgICkpO1xuICB9KTtcbn07XG4iXX0=